{"ast":null,"code":"var _jsxFileName = \"/Users/frankwang/Documents/GitHub/photo-app/hw06/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { hasCsrfToken, setAccessTokenCookie } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction renderApp() {\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this), document.getElementById('root'));\n}\n/**************************************************************\n * Authentication\n **************************************************************\n * There are two authentication pathways handled here:\n * 1. The hasCsrfToken() pathway is used if React is being\n *    served on the same server as the REST API (and uses the\n *    Flask server-side login form). For production deployment\n *    only.\n * \n * 2. The setAccessTokenCookie() pathway is used if you have\n *    created a stand-alone react app that is interacting with\n *    the REST API on another server. This one is the one used\n *    for testing (when using npm start).\n **************************************************************\n */\n// this initializes the app after the access token is set.\n\n\nif (hasCsrfToken() && window.location.port !== '3000') {\n  // this executes if the app is run within flask:\n  console.log('Authentication handled via CSRF + Http-only cookie.');\n  renderApp();\n} else {\n  console.log(window.location.port === '3000'); // this executes if the app is run via npm start\n\n  console.log('Authentication handled via REST API Token.');\n  setAccessTokenCookie('webdev', 'password', renderApp);\n}","map":{"version":3,"sources":["/Users/frankwang/Documents/GitHub/photo-app/hw06/src/index.js"],"names":["React","ReactDOM","App","hasCsrfToken","setAccessTokenCookie","renderApp","render","document","getElementById","window","location","port","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AACA,SAAQC,YAAR,EAAsBC,oBAAtB,QAAiD,SAAjD;;;AAEA,SAASC,SAAT,GAAqB;AACjBJ,EAAAA,QAAQ,CAACK,MAAT,eACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,UADJ,EAEIC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFJ;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,IAAIL,YAAY,MAAMM,MAAM,CAACC,QAAP,CAAgBC,IAAhB,KAAyB,MAA/C,EAAuD;AACnD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACAR,EAAAA,SAAS;AACZ,CAJD,MAIO;AACHO,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,KAAyB,MAArC,EADG,CAEH;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACAT,EAAAA,oBAAoB,CAAC,QAAD,EAAW,UAAX,EAAuBC,SAAvB,CAApB;AACH","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport {hasCsrfToken, setAccessTokenCookie} from './utils';\n\nfunction renderApp() {\n    ReactDOM.render(\n        <App />,\n        document.getElementById('root')\n    );\n}\n\n/**************************************************************\n * Authentication\n **************************************************************\n * There are two authentication pathways handled here:\n * 1. The hasCsrfToken() pathway is used if React is being\n *    served on the same server as the REST API (and uses the\n *    Flask server-side login form). For production deployment\n *    only.\n * \n * 2. The setAccessTokenCookie() pathway is used if you have\n *    created a stand-alone react app that is interacting with\n *    the REST API on another server. This one is the one used\n *    for testing (when using npm start).\n **************************************************************\n */\n\n// this initializes the app after the access token is set.\nif (hasCsrfToken() && window.location.port !== '3000') {\n    // this executes if the app is run within flask:\n    console.log('Authentication handled via CSRF + Http-only cookie.')\n    renderApp();\n} else {\n    console.log(window.location.port === '3000')\n    // this executes if the app is run via npm start\n    console.log('Authentication handled via REST API Token.')\n    setAccessTokenCookie('webdev', 'password', renderApp);\n}"]},"metadata":{},"sourceType":"module"}